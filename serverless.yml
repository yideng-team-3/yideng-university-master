service: web3-university

layers:
  dependencies:
    path: layer
    description: "Node.js dependencies layer"
    compatibleRuntimes:
      - nodejs20.x

provider:
  name: aws
  runtime: nodejs20.x
  region: ${file(./config/${self:provider.stage}.yml):region, 'us-east-2'}
  stage: ${opt:stage, 'dev'}
  environment:
    NODE_ENV: ${self:provider.stage}
    DYNAMODB_USERS_TABLE: ${self:service}-${self:provider.stage}-users
    LOG_LEVEL: ${file(./config/${self:provider.stage}.yml):logLevel, 'INFO'}
    JWT_SECRET: ${env:JWT_SECRET, 'fallback_secret_key'}
  layers:
    - {Ref: DependenciesLambdaLayer}
  memorySize: ${file(./config/${self:provider.stage}.yml):memorySize, 1024}
  timeout: ${file(./config/${self:provider.stage}.yml):timeout, 29}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:ListTables
          Resource: "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/*"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
          Resource:
            - !GetAtt UsersTable.Arn
            - !Join ["", [!GetAtt UsersTable.Arn, "/index/*"]]

functions:
  api:
    handler: dist/lambda.handler
    layers:
      - {Ref: DependenciesLambdaLayer}
    events:
      - http:
          path: /{proxy+}
          method: any
          cors:
            origin: 'http://localhost:3000,https://senmu.site,https://biglove.top'
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - Origin
              - Accept
            allowCredentials: true
            maxAge: 600

resources:
  Resources:
    # 用户表
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_USERS_TABLE}
        BillingMode: PAY_PER_REQUEST # 按需计费模式
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: walletAddress
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: walletAddressIndex
            KeySchema:
              - AttributeName: walletAddress
                KeyType: HASH
            Projection:
              ProjectionType: ALL

plugins:
  - serverless-offline
  - serverless-webpack
  - serverless-dotenv-plugin

custom:
  dotenv:
    path: ./.env.${opt:env, self:provider.stage}
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: false
    # includeModules: true
    packager: "yarn"
    packagerOptions:
      scripts:
        - rm -rf node_modules/aws-sdk
